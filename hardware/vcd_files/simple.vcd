$date
   Tue Apr 14 07:09:23 2020
$end
$version
  2019.1
$end
$timescale
  1ps
$end
$scope module isa_testbench $end
$var reg 1 F$ clk $end
$var reg 1 G$ rst $end
$var wire 32 % csr [31:0] $end
$var reg 1 H$ done $end
$var reg 32 I$ cycle [31:0] $end
$var reg 256 J$ MIF_FILE [255:0] $end
$var parameter 32 K$ CPU_CLOCK_PERIOD [31:0] $end
$var parameter 32 L$ CPU_CLOCK_FREQ [31:0] $end
$scope module CPU $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # FPGA_SERIAL_RX $end
$var wire 1 $ FPGA_SERIAL_TX $end
$var wire 32 % csr [31:0] $end
$var wire 12 & bios_addra [11:0] $end
$var wire 12 ' bios_addrb [11:0] $end
$var wire 32 ( bios_douta [31:0] $end
$var wire 32 ) bios_doutb [31:0] $end
$var wire 32 * pc_in [31:0] $end
$var wire 32 + jal_addr [31:0] $end
$var wire 2 , jump_judge [1:0] $end
$var wire 32 - branch_addr [31:0] $end
$var wire 32 . pc_data_reg [31:0] $end
$var wire 32 / pc_plus_reg [31:0] $end
$var wire 1 0 branch_judge $end
$var wire 32 1 pc_store [31:0] $end
$var wire 32 2 alu_result_reg1 [31:0] $end
$var wire 14 3 imem_addra [13:0] $end
$var wire 14 4 imem_addrb [13:0] $end
$var wire 32 5 imem_douta [31:0] $end
$var wire 32 6 imem_doutb [31:0] $end
$var wire 32 7 imem_dina [31:0] $end
$var wire 32 8 imem_dinb [31:0] $end
$var wire 1 9 imem_wea $end
$var wire 1 : imem_web $end
$var wire 4 ; dmem_wea_reg [3:0] $end
$var wire 32 < pc_in1 [31:0] $end
$var wire 32 = inst_output [31:0] $end
$var wire 32 > imm_out [31:0] $end
$var wire 1 ? rf_we $end
$var wire 5 @ rf_ra1 [4:0] $end
$var wire 5 A rf_ra2 [4:0] $end
$var wire 5 B rf_wa [4:0] $end
$var wire 32 C rf_wd [31:0] $end
$var wire 32 D rf_rd1 [31:0] $end
$var wire 32 E rf_rd2 [31:0] $end
$var wire 5 F wb_addr [4:0] $end
$var wire 32 G reg1_data_reg [31:0] $end
$var wire 5 H reg1_addr_reg [4:0] $end
$var wire 32 I reg2_data_reg [31:0] $end
$var wire 5 J reg2_addr_reg [4:0] $end
$var wire 1 K inst_alu30_reg $end
$var wire 3 L inst_alu_reg [2:0] $end
$var wire 2 M control_forward_reg [1:0] $end
$var wire 1 N control_dmem_reg $end
$var wire 2 O control_jump_reg [1:0] $end
$var wire 2 P aluOp_reg [1:0] $end
$var wire 2 Q control_uart_reg [1:0] $end
$var wire 2 R control_wr_mux_reg [1:0] $end
$var wire 1 S control_csr_we_reg $end
$var wire 5 T rd_addr_reg [4:0] $end
$var wire 3 U control_load_reg [2:0] $end
$var wire 1 V control_branch_reg $end
$var wire 1 W control_wb_reg $end
$var wire 32 X branch_addr_reg [31:0] $end
$var wire 32 Y imm_ex [31:0] $end
$var wire 32 Z reg1_output [31:0] $end
$var wire 32 [ reg2_output [31:0] $end
$var wire 5 \ rf1_forward [4:0] $end
$var wire 5 ] rf2_forward [4:0] $end
$var wire 5 ^ wb_addr_ex [4:0] $end
$var wire 32 _ pc_ex [31:0] $end
$var wire 32 ` pc_plus_ex [31:0] $end
$var wire 2 a control_forward [1:0] $end
$var wire 2 b control_jump [1:0] $end
$var wire 2 c aluOp [1:0] $end
$var wire 2 d control_uart [1:0] $end
$var wire 1 e control_dmem $end
$var wire 2 f control_wr_mux [1:0] $end
$var wire 1 g control_csr_we $end
$var wire 3 h inst_alu [2:0] $end
$var wire 1 i inst_alu30 $end
$var wire 3 j control_load_ex [2:0] $end
$var wire 1 k control_wb_ex $end
$var wire 1 l control_branch $end
$var wire 32 m wb_data [31:0] $end
$var wire 1 n if_flush $end
$var wire 1 o control_wb_back $end
$var wire 32 p alu_result_reg [31:0] $end
$var wire 5 q wb_addr_reg [4:0] $end
$var wire 2 r control_wr_mux_reg2 [1:0] $end
$var wire 32 s pc_plus_reg2 [31:0] $end
$var wire 32 t mem_write_reg [31:0] $end
$var wire 4 u dmem_wea [3:0] $end
$var wire 1 v csr_we $end
$var wire 32 w csr_din [31:0] $end
$var wire 1 x control_wb $end
$var wire 1 y is_inst_exec $end
$var wire 2 z control_uart_wb [1:0] $end
$var wire 32 { rtype_output [31:0] $end
$var wire 2 | control_data [1:0] $end
$var wire 32 } pc_plus_wb [31:0] $end
$var wire 3 ~ control_load [2:0] $end
$var wire 2 !! addr_offset [1:0] $end
$var wire 32 "! uart_data_out [31:0] $end
$var wire 1 #! uart_rx_data_out_valid $end
$var wire 1 $! uart_tx_data_in_ready $end
$var wire 8 %! uart_rx_data_out [7:0] $end
$var wire 1 &! uart_rx_data_out_ready $end
$var wire 2 '! control_load_uart [1:0] $end
$var wire 32 (! dmem_addra [31:0] $end
$var wire 32 )! dmem_dina [31:0] $end
$var wire 32 *! dmem_douta [31:0] $end
$var wire 1 +! uart_tx_data_in_valid $end
$var wire 8 ,! uart_tx_data_in [7:0] $end
$var wire 1 -! reset $end
$var parameter 32 .! CPU_CLOCK_FREQ [31:0] $end
$var parameter 32 /! RESET_PC [31:0] $end
$var parameter 32 0! BAUD_RATE [31:0] $end
$var parameter 104 1! BIOS_MEM_HEX_FILE [103:0] $end
$var parameter 32 2! BIOS_AWIDTH [31:0] $end
$var parameter 32 3! BIOS_DWIDTH [31:0] $end
$var parameter 32 4! BIOS_DEPTH [31:0] $end
$var parameter 32 5! IMEM_AWIDTH [31:0] $end
$var parameter 32 6! IMEM_DWIDTH [31:0] $end
$var parameter 32 7! IMEM_DEPTH [31:0] $end
$var parameter 32 8! DMEM_AWIDTH [31:0] $end
$var parameter 32 9! DMEM_DWIDTH [31:0] $end
$var parameter 32 :! DMEM_DEPTH [31:0] $end
$var parameter 12 ;! CSR_ADDR [11:0] $end
$scope module mux_pc $end
$var wire 32 / pc_plus [31:0] $end
$var wire 32 + jal_addr [31:0] $end
$var wire 32 - branch_addr [31:0] $end
$var wire 2 , jump_judge [1:0] $end
$var wire 1 0 branch_judge $end
$var wire 32 * pc_o [31:0] $end
$upscope $end
$scope module pc_reg $end
$var reg 32 <! q [31:0] $end
$var wire 32 * d [31:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 =! N [31:0] $end
$var parameter 32 >! INIT [31:0] $end
$upscope $end
$scope module bios_mem $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ?! d0 [31:0] $end
$var wire 12 & addr0 [11:0] $end
$var wire 1 @! we0 $end
$var wire 32 ( q0 [31:0] $end
$var wire 32 A! d1 [31:0] $end
$var wire 12 ' addr1 [11:0] $end
$var wire 1 B! we1 $end
$var wire 32 ) q1 [31:0] $end
$var integer 32 C! i $end
$var reg 32 D! read0_reg_val [31:0] $end
$var reg 32 E! read1_reg_val [31:0] $end
$var parameter 32 F! DWIDTH [31:0] $end
$var parameter 32 G! AWIDTH [31:0] $end
$var parameter 32 H! DEPTH [31:0] $end
$var parameter 104 I! MEM_INIT_HEX_FILE [103:0] $end
$var parameter 8 J! MEM_INIT_BIN_FILE [7:0] $end
$upscope $end
$scope module imem $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 7 d0 [31:0] $end
$var wire 14 3 addr0 [13:0] $end
$var wire 1 9 we0 $end
$var wire 32 5 q0 [31:0] $end
$var wire 32 8 d1 [31:0] $end
$var wire 14 4 addr1 [13:0] $end
$var wire 1 : we1 $end
$var wire 32 6 q1 [31:0] $end
$var integer 32 K! i $end
$var reg 32 L! read0_reg_val [31:0] $end
$var reg 32 M! read1_reg_val [31:0] $end
$var parameter 32 N! DWIDTH [31:0] $end
$var parameter 32 O! AWIDTH [31:0] $end
$var parameter 32 P! DEPTH [31:0] $end
$var parameter 8 Q! MEM_INIT_HEX_FILE [7:0] $end
$var parameter 8 R! MEM_INIT_BIN_FILE [7:0] $end
$upscope $end
$scope module mux_imem_read $end
$var wire 1 S! pc30 $end
$var wire 32 5 imem_out [31:0] $end
$var wire 32 ( bios_out [31:0] $end
$var wire 32 = inst_output [31:0] $end
$upscope $end
$scope module ID $end
$var wire 32 = inst_i [31:0] $end
$var wire 32 1 pc_data_i [31:0] $end
$var wire 32 D reg1_data_i [31:0] $end
$var wire 32 E reg2_data_i [31:0] $end
$var wire 5 @ reg1_addr_o [4:0] $end
$var wire 5 A reg2_addr_o [4:0] $end
$var wire 32 X branch_addr_o [31:0] $end
$var wire 1 K inst_alu30_o $end
$var wire 3 L funct3_o [2:0] $end
$var wire 32 . pc_data_o [31:0] $end
$var wire 32 / pc_plus_o [31:0] $end
$var wire 32 > imm_o [31:0] $end
$var wire 5 T rd_addr_o [4:0] $end
$var wire 5 H rs1_addr_o [4:0] $end
$var wire 5 J rs2_addr_o [4:0] $end
$var wire 32 G reg1_data_o [31:0] $end
$var wire 32 I reg2_data_o [31:0] $end
$var wire 2 M control_forward_o [1:0] $end
$var wire 2 O control_jump_o [1:0] $end
$var wire 2 P alu_op_o [1:0] $end
$var wire 2 Q control_uart_o [1:0] $end
$var wire 1 N control_dmem_o $end
$var wire 2 R control_wr_mux_o [1:0] $end
$var wire 1 S control_csr_we_o $end
$var wire 3 U control_load_o [2:0] $end
$var wire 1 W control_wb_o $end
$var wire 1 V control_branch_o $end
$var wire 5 T! inst_rd [4:0] $end
$var wire 5 U! inst_rs1 [4:0] $end
$var wire 5 V! inst_rs2 [4:0] $end
$var wire 7 W! inst_opcode [6:0] $end
$var wire 1 X! control_branch $end
$var wire 32 Y! branch_offset_o [31:0] $end
$scope module control $end
$var wire 7 W! opcode [6:0] $end
$var wire 3 Z! funct3_i [2:0] $end
$var reg 2 [! control_forward [1:0] $end
$var wire 2 O control_jump [1:0] $end
$var wire 2 P alu_op [1:0] $end
$var wire 2 Q control_uart [1:0] $end
$var wire 1 N control_dmem $end
$var wire 2 R control_wr_mux [1:0] $end
$var wire 1 S control_csr_we $end
$var wire 3 U control_load [2:0] $end
$var wire 1 V control_branch $end
$var wire 1 W control_wb $end
$var wire 1 \! r_type_signal $end
$var wire 1 ]! i_type_signal_lw $end
$var wire 1 ^! b_type_signal $end
$var wire 1 _! i_type_signal_addi $end
$var wire 1 `! i_type_signal_jalr $end
$var wire 1 a! s_type_signal $end
$var wire 1 b! j_type_signal $end
$var wire 1 c! u_type_signal $end
$var wire 1 d! l_type_signal $end
$var wire 1 e! csr_type_signal $end
$var wire 1 f! opc_lui_signal $end
$var wire 1 g! opc_auipc_signal $end
$upscope $end
$scope module imm $end
$var wire 32 = opcode_i [31:0] $end
$var wire 3 Z! funct_i [2:0] $end
$var reg 32 h! imm [31:0] $end
$var reg 32 i! branch_offset [31:0] $end
$upscope $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 32 C d0 [31:0] $end
$var wire 5 B addr0 [4:0] $end
$var wire 1 ? we0 $end
$var wire 5 @ addr1 [4:0] $end
$var wire 32 D q1 [31:0] $end
$var wire 5 A addr2 [4:0] $end
$var wire 32 E q2 [31:0] $end
$var integer 32 j! i $end
$var parameter 32 k! DWIDTH [31:0] $end
$var parameter 32 l! AWIDTH [31:0] $end
$var parameter 32 m! DEPTH [31:0] $end
$var parameter 8 n! MEM_INIT_HEX_FILE [7:0] $end
$var parameter 8 o! MEM_INIT_BIN_FILE [7:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var wire 32 . pc_data_i [31:0] $end
$var wire 32 / pc_plus_i [31:0] $end
$var wire 32 _ pc_data_o [31:0] $end
$var wire 32 ` pc_plus_o [31:0] $end
$var wire 32 G reg1_data_i [31:0] $end
$var wire 32 I reg2_data_i [31:0] $end
$var wire 5 T rd_addr_i [4:0] $end
$var wire 5 H reg1_addr_i [4:0] $end
$var wire 5 J reg2_addr_i [4:0] $end
$var wire 32 > imm_i [31:0] $end
$var wire 32 Z reg1_data_o [31:0] $end
$var wire 32 [ reg2_data_o [31:0] $end
$var wire 5 ^ rd_addr_o [4:0] $end
$var wire 5 \ reg1_addr_o [4:0] $end
$var wire 5 ] reg2_addr_o [4:0] $end
$var wire 32 Y imm_o [31:0] $end
$var wire 3 L funct3_i [2:0] $end
$var wire 1 K inst_alu30_i $end
$var wire 2 M control_forward_i [1:0] $end
$var wire 2 O control_jump_i [1:0] $end
$var wire 2 P alu_op_i [1:0] $end
$var wire 2 Q control_uart_i [1:0] $end
$var wire 1 N control_dmem_i $end
$var wire 2 R control_wr_mux_i [1:0] $end
$var wire 1 S control_csr_we_i $end
$var wire 3 U control_load_i [2:0] $end
$var wire 1 W control_wb_i $end
$var wire 1 V control_branch_i $end
$var wire 32 X branch_addr_i [31:0] $end
$var wire 32 m wb_data_i [31:0] $end
$var wire 5 F wb_addr_i [4:0] $end
$var wire 1 o is_wb_i $end
$var wire 2 a control_forward_o [1:0] $end
$var wire 2 b control_jump_o [1:0] $end
$var wire 2 c alu_op_o [1:0] $end
$var wire 2 d control_uart_o [1:0] $end
$var wire 1 e control_dmem_o $end
$var wire 2 f control_wr_mux_o [1:0] $end
$var wire 1 g control_csr_we_o $end
$var wire 3 j control_load_o [2:0] $end
$var wire 1 k control_wb_o $end
$var wire 1 l control_branch_o $end
$var wire 32 - branch_addr_o [31:0] $end
$var wire 3 h funct3_o [2:0] $end
$var wire 1 i inst_alu30_o $end
$var wire 32 p! reg1_data_o1 [31:0] $end
$var wire 32 q! reg2_data_o1 [31:0] $end
$scope module control_wb_reg $end
$var reg 1 r! q [0:0] $end
$var wire 1 W d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 s! N [31:0] $end
$var parameter 0 t! INIT $end
$upscope $end
$scope module pc_data_reg $end
$var reg 32 u! q [31:0] $end
$var wire 32 . d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 v! N [31:0] $end
$var parameter 32 w! INIT [31:0] $end
$upscope $end
$scope module pc_plus_reg $end
$var reg 32 x! q [31:0] $end
$var wire 32 / d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 y! N [31:0] $end
$var parameter 32 z! INIT [31:0] $end
$upscope $end
$scope module reg1_store $end
$var reg 32 {! q [31:0] $end
$var wire 32 p! d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 |! N [31:0] $end
$var parameter 32 }! INIT [31:0] $end
$upscope $end
$scope module reg2_store $end
$var reg 32 ~! q [31:0] $end
$var wire 32 q! d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 !" N [31:0] $end
$var parameter 32 "" INIT [31:0] $end
$upscope $end
$scope module reg1_addr_store $end
$var reg 5 #" q [4:0] $end
$var wire 5 H d [4:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 $" N [31:0] $end
$var parameter 5 %" INIT [4:0] $end
$upscope $end
$scope module reg2_addr_store $end
$var reg 5 &" q [4:0] $end
$var wire 5 J d [4:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 '" N [31:0] $end
$var parameter 5 (" INIT [4:0] $end
$upscope $end
$scope module rd_addr_store $end
$var reg 5 )" q [4:0] $end
$var wire 5 T d [4:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 *" N [31:0] $end
$var parameter 5 +" INIT [4:0] $end
$upscope $end
$scope module imm_data $end
$var reg 32 ," q [31:0] $end
$var wire 32 > d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 -" N [31:0] $end
$var parameter 32 ." INIT [31:0] $end
$upscope $end
$scope module load_sign $end
$var reg 1 /" q [0:0] $end
$var wire 1 N d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 0" N [31:0] $end
$var parameter 0 1" INIT $end
$upscope $end
$scope module funct3_reg $end
$var reg 3 2" q [2:0] $end
$var wire 3 L d [2:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 3" N [31:0] $end
$var parameter 3 4" INIT [2:0] $end
$upscope $end
$scope module inst_alu30_reg $end
$var reg 1 5" q [0:0] $end
$var wire 1 K d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 6" N [31:0] $end
$var parameter 0 7" INIT $end
$upscope $end
$scope module forward_reg $end
$var reg 2 8" q [1:0] $end
$var wire 2 M d [1:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 9" N [31:0] $end
$var parameter 2 :" INIT [1:0] $end
$upscope $end
$scope module alu_reg $end
$var reg 2 ;" q [1:0] $end
$var wire 2 P d [1:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 <" N [31:0] $end
$var parameter 2 =" INIT [1:0] $end
$upscope $end
$scope module jump_reg $end
$var reg 2 >" q [1:0] $end
$var wire 2 O d [1:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 ?" N [31:0] $end
$var parameter 2 @" INIT [1:0] $end
$upscope $end
$scope module uart_reg $end
$var reg 2 A" q [1:0] $end
$var wire 2 Q d [1:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 B" N [31:0] $end
$var parameter 2 C" INIT [1:0] $end
$upscope $end
$scope module dmem_reg $end
$var reg 1 D" q [0:0] $end
$var wire 1 N d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 E" N [31:0] $end
$var parameter 0 F" INIT $end
$upscope $end
$scope module wr_mux_reg $end
$var reg 2 G" q [1:0] $end
$var wire 2 R d [1:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 H" N [31:0] $end
$var parameter 2 I" INIT [1:0] $end
$upscope $end
$scope module csr_we_reg $end
$var reg 1 J" q [0:0] $end
$var wire 1 S d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 K" N [31:0] $end
$var parameter 0 L" INIT $end
$upscope $end
$scope module ctrl_branch_reg $end
$var reg 1 M" q [0:0] $end
$var wire 1 V d [0:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 N" N [31:0] $end
$var parameter 0 O" INIT $end
$upscope $end
$scope module control_load $end
$var reg 3 P" q [2:0] $end
$var wire 3 U d [2:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 Q" N [31:0] $end
$var parameter 3 R" INIT [2:0] $end
$upscope $end
$scope module branch_addr_load $end
$var reg 32 S" q [31:0] $end
$var wire 32 X d [31:0] $end
$var wire 1 n rst $end
$var wire 1 ! clk $end
$var parameter 32 T" N [31:0] $end
$var parameter 32 U" INIT [31:0] $end
$upscope $end
$upscope $end
$scope module EX $end
$var wire 32 m forward_data [31:0] $end
$var wire 5 F wb_addr_i [4:0] $end
$var wire 32 _ pc_data_i [31:0] $end
$var wire 32 ` pc_plus_i [31:0] $end
$var wire 32 Z reg1_data_i [31:0] $end
$var wire 32 [ reg2_data_i [31:0] $end
$var wire 5 ^ rd_addr_i [4:0] $end
$var wire 5 \ reg1_addr_i [4:0] $end
$var wire 5 ] reg2_addr_i [4:0] $end
$var wire 32 Y imm_i [31:0] $end
$var wire 3 h funct3_i [2:0] $end
$var wire 1 i inst_alu30_i $end
$var wire 2 a control_forward_i [1:0] $end
$var wire 2 c alu_op_i [1:0] $end
$var wire 2 d control_uart_i [1:0] $end
$var wire 1 e control_dmem_i $end
$var wire 2 f control_wr_mux_i [1:0] $end
$var wire 1 g control_csr_we_i $end
$var wire 1 k control_wb_i $end
$var wire 1 o control_wb_back $end
$var wire 1 l control_branch_i $end
$var wire 2 b control_jump_i [1:0] $end
$var wire 32 p alu_result_o [31:0] $end
$var wire 32 t mem_write_o [31:0] $end
$var wire 5 q wb_addr_o [4:0] $end
$var wire 2 r control_wr_mux_o [1:0] $end
$var wire 32 s pc_plus_o [31:0] $end
$var wire 4 ; dmem_we [3:0] $end
$var wire 1 v control_csr_we_o $end
$var wire 32 w csr_data_o [31:0] $end
$var wire 1 x control_wb_o $end
$var wire 1 0 branch_judge $end
$var wire 1 y inst_exec_i $end
$var wire 2 z control_uart_o [1:0] $end
$var wire 32 V" aluout [31:0] $end
$var wire 4 W" alu_ctrl [3:0] $end
$var wire 2 X" reg1_judge [1:0] $end
$var wire 2 Y" reg2_judge [1:0] $end
$var wire 1 Z" mem_waddr_judge $end
$var wire 32 [" aluin1 [31:0] $end
$var wire 32 \" aluin2 [31:0] $end
$var wire 32 ]" mem_wdata [31:0] $end
$var wire 32 ^" branch_comp_a [31:0] $end
$var wire 32 _" branch_comp_b [31:0] $end
$var wire 1 `" mem_wdata_judge $end
$scope module dmem_wr $end
$var wire 1 e control_dmem $end
$var wire 3 h funct3_i [2:0] $end
$var wire 2 a" addr_offset [1:0] $end
$var wire 4 ; dmem_we [3:0] $end
$var wire 4 b" sb [3:0] $end
$var wire 4 c" sh [3:0] $end
$var wire 4 d" sw [3:0] $end
$upscope $end
$scope module alu_control $end
$var wire 3 h inst_alu [2:0] $end
$var wire 1 i inst_alu30 $end
$var wire 2 c aluOp [1:0] $end
$var wire 4 W" aluCtrl [3:0] $end
$var wire 4 e" func_imm [3:0] $end
$var wire 4 f" func_imm1 [3:0] $end
$upscope $end
$scope module forwarding_unit $end
$var wire 5 \ reg1_addr [4:0] $end
$var wire 5 ] reg2_addr [4:0] $end
$var wire 5 F wb_addr [4:0] $end
$var wire 1 o is_wb $end
$var wire 2 a control_forward [1:0] $end
$var wire 2 X" reg1_judge [1:0] $end
$var wire 2 Y" reg2_judge [1:0] $end
$var wire 1 `" mem_wdata_judge $end
$upscope $end
$scope module change_mem_wr $end
$var wire 4 ; dmem_we [3:0] $end
$var wire 32 ]" in_data [31:0] $end
$var reg 32 g" out_data [31:0] $end
$upscope $end
$scope module mux_reg1 $end
$var wire 32 m wb_data [31:0] $end
$var wire 32 Z reg1_output [31:0] $end
$var wire 32 _ pc_output [31:0] $end
$var wire 2 X" reg1_judge [1:0] $end
$var wire 32 [" aluin1 [31:0] $end
$upscope $end
$scope module mux_reg2 $end
$var wire 32 Y imm [31:0] $end
$var wire 32 [ reg2_output [31:0] $end
$var wire 32 m wb_data [31:0] $end
$var wire 2 Y" reg2_judge [1:0] $end
$var wire 32 \" aluin2 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 [" aluin1 [31:0] $end
$var wire 32 \" aluin2 [31:0] $end
$var wire 32 V" aluout [31:0] $end
$var wire 4 W" aluCtrl [3:0] $end
$var wire 32 h" alu_add [31:0] $end
$var wire 32 i" alu_sub [31:0] $end
$var wire 32 j" alu_or [31:0] $end
$var wire 32 k" alu_and [31:0] $end
$var wire 32 l" alu_sll [31:0] $end
$var wire 32 m" alu_slt [31:0] $end
$var wire 32 n" alu_sltu [31:0] $end
$var wire 32 o" alu_xor [31:0] $end
$var wire 32 p" alu_srl [31:0] $end
$var wire 32 q" alu_sra [31:0] $end
$var wire 1 r" input_sign1 $end
$var wire 1 s" input_sign2 $end
$upscope $end
$scope module branch_comp $end
$var wire 3 h branch_type [2:0] $end
$var wire 32 ^" a [31:0] $end
$var wire 32 _" b [31:0] $end
$var wire 1 l is_branch $end
$var reg 1 t" branch_judge $end
$upscope $end
$upscope $end
$scope module EX_WB $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 p alu_result_i [31:0] $end
$var wire 5 q wb_addr_i [4:0] $end
$var wire 2 r control_wr_mux_i [1:0] $end
$var wire 32 s pc_plus_i [31:0] $end
$var wire 3 j control_load_i [2:0] $end
$var wire 1 x control_wb_i $end
$var wire 1 y inst_exec_i $end
$var wire 1 #! uart_rx_out_valid $end
$var wire 1 $! uart_tx_in_ready $end
$var wire 8 %! uart_read_i [7:0] $end
$var wire 2 z control_uart_i [1:0] $end
$var wire 3 ~ control_load_o [2:0] $end
$var wire 32 { alu_result_o [31:0] $end
$var wire 5 F wb_addr_o [4:0] $end
$var wire 2 | control_wr_mux_o [1:0] $end
$var wire 32 } pc_plus_o [31:0] $end
$var wire 2 !! addr_offset [1:0] $end
$var wire 1 o control_wb_o $end
$var wire 32 "! uart_data_o [31:0] $end
$var wire 2 '! control_uart_o [1:0] $end
$var wire 8 u" store_data [7:0] $end
$var wire 32 v" cycle_count1 [31:0] $end
$var wire 32 w" cycle_count2 [31:0] $end
$var wire 1 x" reset_count $end
$var wire 1 y" is_count $end
$var wire 32 z" inst_count1 [31:0] $end
$var wire 32 {" inst_count2 [31:0] $end
$var reg 32 |" uart_data [31:0] $end
$scope module store_uart $end
$var reg 2 }" q [1:0] $end
$var wire 2 z d [1:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 ~" N [31:0] $end
$var parameter 2 !# INIT [1:0] $end
$upscope $end
$scope module store_load $end
$var reg 3 "# q [2:0] $end
$var wire 3 j d [2:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 ## N [31:0] $end
$var parameter 3 $# INIT [2:0] $end
$upscope $end
$scope module store_offset $end
$var reg 2 %# q [1:0] $end
$var wire 2 &# d [1:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 '# N [31:0] $end
$var parameter 2 (# INIT [1:0] $end
$upscope $end
$scope module store_alu $end
$var reg 32 )# q [31:0] $end
$var wire 32 p d [31:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 *# N [31:0] $end
$var parameter 32 +# INIT [31:0] $end
$upscope $end
$scope module store_addr $end
$var reg 5 ,# q [4:0] $end
$var wire 5 q d [4:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 -# N [31:0] $end
$var parameter 5 .# INIT [4:0] $end
$upscope $end
$scope module store_control $end
$var reg 2 /# q [1:0] $end
$var wire 2 r d [1:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 0# N [31:0] $end
$var parameter 2 1# INIT [1:0] $end
$upscope $end
$scope module store_pc_wb $end
$var reg 32 2# q [31:0] $end
$var wire 32 s d [31:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 3# N [31:0] $end
$var parameter 32 4# INIT [31:0] $end
$upscope $end
$scope module store_control_wb $end
$var reg 1 5# q [0:0] $end
$var wire 1 x d [0:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 6# N [31:0] $end
$var parameter 0 7# INIT $end
$upscope $end
$scope module store_uart_data $end
$var reg 8 8# q [7:0] $end
$var wire 8 %! d [7:0] $end
$var wire 1 " rst $end
$var wire 1 #! ce $end
$var wire 1 ! clk $end
$var parameter 32 9# N [31:0] $end
$var parameter 7 :# INIT [6:0] $end
$upscope $end
$scope module cycle_counter $end
$var reg 32 ;# q [31:0] $end
$var wire 32 w" d [31:0] $end
$var wire 1 x" rst $end
$var wire 1 ! clk $end
$var parameter 32 <# N [31:0] $end
$var parameter 32 =# INIT [31:0] $end
$upscope $end
$scope module inst_counter $end
$var reg 32 ># q [31:0] $end
$var wire 32 {" d [31:0] $end
$var wire 1 x" rst $end
$var wire 1 y" ce $end
$var wire 1 ! clk $end
$var parameter 32 ?# N [31:0] $end
$var parameter 32 @# INIT [31:0] $end
$upscope $end
$scope module uart_lw $end
$var reg 32 A# q [31:0] $end
$var wire 32 B# d [31:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 C# N [31:0] $end
$var parameter 32 D# INIT [31:0] $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 )! d [31:0] $end
$var wire 32 (! addr [31:0] $end
$var wire 4 u wbe [3:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 *! q [31:0] $end
$var integer 32 E# i $end
$var reg 32 F# read_reg_val [31:0] $end
$var parameter 32 G# DWIDTH [31:0] $end
$var parameter 32 H# AWIDTH [31:0] $end
$var parameter 32 I# DEPTH [31:0] $end
$var parameter 8 J# MEM_INIT_HEX_FILE [7:0] $end
$var parameter 8 K# MEM_INIT_BIN_FILE [7:0] $end
$upscope $end
$scope module csr_reg $end
$var reg 32 L# q [31:0] $end
$var wire 32 w d [31:0] $end
$var wire 1 " rst $end
$var wire 1 v ce $end
$var wire 1 ! clk $end
$var parameter 32 M# N [31:0] $end
$var parameter 32 N# INIT [31:0] $end
$upscope $end
$scope module WB $end
$var wire 32 { alu_result_i [31:0] $end
$var wire 5 F wb_addr_i [4:0] $end
$var wire 2 | control_wr_mux_i [1:0] $end
$var wire 32 } pc_plus_i [31:0] $end
$var wire 3 ~ control_load_i [2:0] $end
$var wire 2 !! addr_offset_i [1:0] $end
$var wire 32 "! uart_data_i [31:0] $end
$var wire 2 '! control_uart_i [1:0] $end
$var wire 32 *! dmem_douta_i [31:0] $end
$var wire 32 ) bios_doutb_i [31:0] $end
$var wire 5 B wb_addr_o [4:0] $end
$var wire 32 m wb_data_o [31:0] $end
$var wire 32 O# dmem_load_i [31:0] $end
$var wire 32 P# wb_data [31:0] $end
$var wire 32 Q# before_uart_data [31:0] $end
$scope module mux_dmem $end
$var wire 32 O# dmem_output [31:0] $end
$var wire 32 ) bios_output [31:0] $end
$var wire 32 } pc_output [31:0] $end
$var wire 32 { rtype_output [31:0] $end
$var wire 32 Q# wb_data [31:0] $end
$var wire 2 | control_data [1:0] $end
$var wire 4 R# addr [3:0] $end
$upscope $end
$scope module load_type $end
$var wire 2 !! addr_offset [1:0] $end
$var wire 3 ~ control_load [2:0] $end
$var wire 32 *! dmem_load_i [31:0] $end
$var wire 32 O# dmem_data_o [31:0] $end
$var wire 32 S# dmem_lw [31:0] $end
$var wire 32 T# dmem_data_mv [31:0] $end
$var wire 32 U# dmem_data_mv1 [31:0] $end
$var wire 32 V# dmem_lh [31:0] $end
$var wire 32 W# dmem_lhu [31:0] $end
$var wire 32 X# dmem_lb [31:0] $end
$var wire 32 Y# dmem_lbu [31:0] $end
$upscope $end
$upscope $end
$scope module uart_rx $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 8 %! data_out [7:0] $end
$var wire 1 #! data_out_valid $end
$var wire 1 &! data_out_ready $end
$var wire 1 # serial_in $end
$var wire 10 Z# rx_shift_val [9:0] $end
$var wire 10 [# rx_shift_next [9:0] $end
$var wire 1 \# rx_shift_ce $end
$var wire 4 ]# bit_counter_val [3:0] $end
$var wire 4 ^# bit_counter_next [3:0] $end
$var wire 1 _# bit_counter_rst $end
$var wire 1 `# bit_counter_ce $end
$var wire 9 a# clock_counter_val [8:0] $end
$var wire 9 b# clock_counter_next [8:0] $end
$var wire 1 c# clock_counter_ce $end
$var wire 1 d# clock_counter_rst $end
$var wire 1 e# is_symbol_edge $end
$var wire 1 f# is_sample_time $end
$var wire 1 g# data_out_fire $end
$var wire 2 h# state_reg_val [1:0] $end
$var reg 2 i# state_reg_next [1:0] $end
$var parameter 32 j# CLOCK_FREQ [31:0] $end
$var parameter 32 k# BAUD_RATE [31:0] $end
$var parameter 32 l# SYMBOL_EDGE_TIME [31:0] $end
$var parameter 32 m# SAMPLE_TIME [31:0] $end
$var parameter 32 n# CLOCK_COUNTER_WIDTH [31:0] $end
$var parameter 2 o# IDLE [1:0] $end
$var parameter 2 p# WORK [1:0] $end
$var parameter 2 q# DONE [1:0] $end
$scope module rx_shift $end
$var reg 10 r# q [9:0] $end
$var wire 10 [# d [9:0] $end
$var wire 1 \# ce $end
$var wire 1 ! clk $end
$var parameter 32 s# N [31:0] $end
$upscope $end
$scope module bit_counter $end
$var reg 4 t# q [3:0] $end
$var wire 4 ^# d [3:0] $end
$var wire 1 _# rst $end
$var wire 1 `# ce $end
$var wire 1 ! clk $end
$var parameter 32 u# N [31:0] $end
$var parameter 32 v# INIT [31:0] $end
$upscope $end
$scope module clock_counter $end
$var reg 9 w# q [8:0] $end
$var wire 9 b# d [8:0] $end
$var wire 1 d# rst $end
$var wire 1 c# ce $end
$var wire 1 ! clk $end
$var parameter 32 x# N [31:0] $end
$var parameter 32 y# INIT [31:0] $end
$upscope $end
$scope module state $end
$var reg 2 z# q [1:0] $end
$var wire 2 {# d [1:0] $end
$var wire 1 " rst $end
$var wire 1 ! clk $end
$var parameter 32 |# N [31:0] $end
$var parameter 2 }# INIT [1:0] $end
$upscope $end
$upscope $end
$scope module uart_tx $end
$var wire 1 ! clk $end
$var wire 1 -! rst $end
$var wire 8 ,! data_in [7:0] $end
$var wire 1 +! data_in_valid $end
$var reg 1 ~# data_in_ready $end
$var reg 1 !$ serial_out $end
$var wire 10 "$ tx_shift_val [9:0] $end
$var reg 10 #$ tx_shift_next [9:0] $end
$var reg 1 $$ tx_shift_ce $end
$var wire 4 %$ bit_counter_val [3:0] $end
$var wire 4 &$ bit_counter_next [3:0] $end
$var wire 1 '$ bit_counter_ce $end
$var wire 1 ($ bit_counter_rst $end
$var wire 9 )$ clock_counter_val [8:0] $end
$var wire 9 *$ clock_counter_next [8:0] $end
$var reg 1 +$ clock_counter_ce $end
$var wire 1 ,$ clock_counter_rst $end
$var wire 1 -$ is_symbol_edge $end
$var wire 1 .$ data_in_fire $end
$var wire 1 /$ state_reg_val $end
$var reg 1 0$ state_reg_next $end
$var parameter 32 1$ CLOCK_FREQ [31:0] $end
$var parameter 32 2$ BAUD_RATE [31:0] $end
$var parameter 32 3$ SYMBOL_EDGE_TIME [31:0] $end
$var parameter 32 4$ CLOCK_COUNTER_WIDTH [31:0] $end
$var parameter 0 5$ IDLE $end
$var parameter 0 6$ WORK $end
$scope module tx_shift $end
$var reg 10 7$ q [9:0] $end
$var wire 10 8$ d [9:0] $end
$var wire 1 9$ ce $end
$var wire 1 ! clk $end
$var parameter 32 :$ N [31:0] $end
$upscope $end
$scope module bit_counter $end
$var reg 4 ;$ q [3:0] $end
$var wire 4 &$ d [3:0] $end
$var wire 1 ($ rst $end
$var wire 1 '$ ce $end
$var wire 1 ! clk $end
$var parameter 32 <$ N [31:0] $end
$var parameter 32 =$ INIT [31:0] $end
$upscope $end
$scope module clock_counter $end
$var reg 9 >$ q [8:0] $end
$var wire 9 *$ d [8:0] $end
$var wire 1 ,$ rst $end
$var wire 1 ?$ ce $end
$var wire 1 ! clk $end
$var parameter 32 @$ N [31:0] $end
$var parameter 32 A$ INIT [31:0] $end
$upscope $end
$scope module state $end
$var reg 1 B$ q [0:0] $end
$var wire 1 C$ d [0:0] $end
$var wire 1 -! rst $end
$var wire 1 ! clk $end
$var parameter 32 D$ N [31:0] $end
$var parameter 0 E$ INIT $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
b0 !!
b100000 !"
b0 !#
1!$
1"
b0 "!
b0 ""
b0 "#
b0 "$
z#
0#!
b0 #"
b11 ##
b0 #$
1$
1$!
b101 $"
b0 $#
1$$
b0 %
b0 %!
b0 %"
b0 %#
b0 %$
b0 &
0&!
b0 &"
b0 &#
b1 &$
b0 '
b0 '!
b101 '"
b10 '#
0'$
bx (
b0 (!
b0 ("
b0 (#
1($
bx )
b0 )!
b0 )"
b0 )#
b0 )$
b10000000000000000000000000000 *
bx *!
b101 *"
b100000 *#
b1 *$
b0 +
0+!
b0 +"
b0 +#
0+$
b0 ,
b0 ,!
b0 ,"
b0 ,#
0,$
b0 -
z-!
b100000 -"
b101 -#
0-$
b1111111111111111111111111100 .
b10111110101111000010000000 .!
b0 ."
b0 .#
0.$
b10000000000000000000000000000 /
b10000000000000000000000000000 /!
0/"
b0 /#
0/$
00
b11100001000000000 0!
b1 0"
b10 0#
00$
b1111111111111111111111111100 1
b1100010011010010110111101110011001100010011010100110001011101100011001100101110011011010110100101100110 1!
01"
b0 1#
b10111110101111000010000000 1$
b0 2
b1100 2!
b0 2"
b0 2#
b11100001000000000 2$
b0 3
b100000 3!
b11 3"
b100000 3#
b110110010 3$
b0 4
b1000000000000 4!
b0 4"
b0 4#
b1001 4$
bx 5
b1110 5!
05"
05#
05$
bx 6
b100000 6!
b1 6"
b1 6#
16$
b0 7
b100000000000000 7!
07"
07#
b0 7$
b0 8
b100000 8!
b0 8"
b0 8#
b0 8$
09
b100000 9!
b10 9"
b1000 9#
19$
0:
b100000000000000 :!
b0 :"
b0 :#
b1010 :$
b0 ;
b10100011110 ;!
b0 ;"
b0 ;#
b0 ;$
b100000000000000000000000000 <
b1111111111111111111111111100 <!
b10 <"
b100000 <#
b100 <$
bx =
b100000 =!
b0 ="
b0 =#
b0 =$
bx >
b1111111111111111111111111100 >!
b0 >"
b0 >#
b0 >$
0?
b0 ?!
b10 ?"
b100000 ?#
0?$
bx @
0@!
b0 @"
b0 @#
b1001 @$
bx A
b0 A!
b0 A"
b0 A#
b0 A$
b0 B
0B!
b10 B"
b0 B#
0B$
b0 C
bx C!
b0 C"
b100000 C#
0C$
bx D
bx D!
0D"
b0 D#
b1 D$
bx E
bx E!
b1 E"
b100000000000000 E#
0E$
b0 F
b100000 F!
0F"
bx F#
0F$
bx G
b1100 G!
b0 G"
b100000 G#
1G$
bx H
b1000000000000 H!
b10 H"
b100000 H#
0H$
bx I
b1100010011010010110111101110011001100010011010100110001011101100011001100101110011011010110100101100110 I!
b0 I"
b100000000000000 I#
b0 I$
bx J
b0 J!
0J"
b0 J#
b1110011011010010110110101110000011011000110010100101110011011010110100101100110 J$
xK
b100000000000000 K!
b1 K"
b0 K#
b10100 K$
bx L
bx L!
0L"
b0 L#
b10111110101111000010000000 L$
b0 M
bx M!
0M"
b100000 M#
xN
b100000 N!
b1 N"
b0 N#
bx O
b1110 O!
0O"
b0 O#
bx P
b100000000000000 P!
b0 P"
b0 P#
bx Q
b0 Q!
b11 Q"
b0 Q#
bx R
b0 R!
b0 R"
b0 R#
xS
0S!
b0 S"
bx S#
bx T
bx T!
b100000 T"
bx T#
bx U
bx U!
b0 U"
b0xxxxxxxx U#
xV
bx V!
b0 V"
bx V#
xW
bx W!
b0 W"
b0xxxxxxxxxxxxxxxx W#
bx X
zX!
b1 X"
bx X#
b0 Y
bx Y!
b1 Y"
b0xxxxxxxx Y#
b0 Z
bx Z!
zZ"
b0 Z#
b0 [
b0 [!
b0 ["
b0x [#
b0 \
x\!
b0 \"
0\#
b0 ]
x]!
b0 ]"
b0 ]#
b0 ^
x^!
b0 ^"
b1 ^#
b0 _
x_!
b0 _"
1_#
b0 `
x`!
0`"
0`#
b0 a
xa!
b0 a"
b0 a#
b0 b
xb!
b1 b"
b1 b#
b0 c
xc!
b11 c"
0c#
b0 d
xd!
b1111 d"
0d#
0e
xe!
b0 e"
0e#
b0 f
xf!
b0 f"
0f#
0g
xg!
b0 g"
0g#
b0 h
bx h!
b0 h"
b0 h#
0i
bx i!
b0 i"
b0 i#
b0 j
b100000 j!
b0 j"
b10111110101111000010000000 j#
0k
b100000 k!
b0 k"
b11100001000000000 k#
0l
b101 l!
b0 l"
b110110010 l#
b0 m
b100000 m!
b0 m"
b11011001 m#
1n
b0 n!
b0 n"
b1001 n#
0o
b0 o!
b0 o"
b0 o#
b0 p
bx p!
b0 p"
b1 p#
b0 q
bx q!
b0 q"
b11 q#
b0 r
0r!
0r"
b0 r#
b0 s
b1 s!
0s"
b1010 s#
b0 t
0t!
0t"
b0 t#
b0 u
b0 u!
b0 u"
b100 u#
0v
b100000 v!
b0 v"
b0 v#
b0 w
b0 w!
b1 w"
b0 w#
0x
b0 x!
1x"
b1001 x#
0y
b100000 y!
0y"
b0 y#
b0 z
b0 z!
b0 z"
b0 z#
b0 {
b0 {!
b1 {"
b0 {#
b0 |
b100000 |!
b0 |"
b10 |#
b0 }
b0 }!
b0 }"
b0 }#
b0 ~
b0 ~!
b10 ~"
1~#
$end
#10000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 (
b0 )
b0 )"
b0 )#
b0 *!
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
b0 5
05"
05#
b0 6
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 =
b0 >
b0 >"
b0 >#
b0 @
b0 A
b0 A"
b0 A#
0B$
b0 D
b0 D!
0D"
b0 E
b0 E!
b100 E#
b0 F#
1F$
b0 G
b0 G"
b0 H
b0 I
b0 J
0J"
0K
b0 L
b0 L!
b0 L#
b0 M!
0M"
0N
b0 O
b0 O#
b11 P
b0 P"
b0 Q
b0 Q#
b0 R
0S
b0 S"
b0 S#
b0 T
b0 T!
b0 T#
b0 U
b0 U!
b0 U#
0V
b0 V!
b0 V#
1W
b0 W!
b0 W#
b1111111111111111111111111100 X
b0 X#
b0 Y!
b0 Y#
b0 Z!
b0 [!
0\!
0]!
0^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
b0 h!
b0 i!
b0 p!
b0 q!
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#20000
0!
0F$
#30000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#40000
0!
0F$
#50000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#60000
0!
0F$
#70000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#80000
0!
0F$
#90000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#100000
0!
0F$
#110000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#120000
0!
0F$
#130000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#140000
0!
0F$
#150000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#160000
0!
0F$
#170000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#180000
0!
0F$
#190000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#200000
0!
0F$
#210000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#220000
0!
0F$
#230000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#240000
0!
0F$
#250000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#260000
0!
0F$
#270000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#280000
0!
0F$
#290000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#300000
0!
0F$
#310000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#320000
0!
0F$
#330000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#340000
0!
0F$
#350000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#360000
0!
0F$
#370000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#380000
0!
0F$
#390000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#400000
0!
0F$
#410000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#420000
0!
0F$
#430000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#440000
0!
0F$
#450000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#460000
0!
0F$
#470000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#480000
0!
0F$
#490000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#500000
0!
0F$
#510000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#520000
0!
0F$
#530000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#540000
0!
0F$
#550000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#560000
0!
0F$
#570000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#580000
0!
0F$
#590000
1!
b0 "#
b0 #"
b0 %#
b0 &"
b0 )"
b0 )#
b0 ,"
b0 ,#
0/"
b0 /#
b0 2"
b0 2#
05"
05#
b0 7$
b0 8"
b0 8#
b0 ;"
b0 ;#
b0 ;$
b1111111111111111111111111100 <!
b0 >"
b0 >#
b0 A"
b0 A#
0B$
0D"
b100 E#
1F$
b0 G"
0J"
b0 L#
0M"
b0 P"
b0 S"
0r!
b0 t#
b0 u!
b0 x!
b0 z#
b0 {!
b0 }"
b0 ~!
#591000
0"
0G$
0n
0x"
#600000
0!
0F$
#610000
1!
b0 "#
b0 #"
b0 %#
b1 &
b0 &"
b10000000000010000000100110111 (
b10000000000010000000100110111 )
b0 )"
b0 )#
b10000000000000000000000000100 *
b10000000000000001101111 *!
b0 ,"
b0 ,#
b1111111111111111111111111100 -
b10000000000000000000000000000 .
b10000000000000000000000000100 /
0/"
b0 /#
b10000000000000000000000000000 1
b0 2"
b0 2#
b1 3
b10000000000000001101111 5
05"
05#
b0x000000000000000xx0xxxx 6
b0 7$
b0 8"
b11 ;"
b1 ;#
b0 ;$
b100000000000000000000000001 <
b10000000000000000000000000000 <!
b10000000000000001101111 =
b100 >
b0 >"
b100 A
b0 A"
b0 A#
0B$
b10000000000010000000100110111 D!
0D"
b0 E
b10000000000010000000100110111 E!
b100 E#
b10000000000000001101111 F#
1F$
b0 G"
b100 J
0J"
b10000000000000001101111 L!
b1 M
b10000000000000001101111 M!
0M"
b10 O
b0 O#
b1 P
b0 P"
b0 Q#
b11 R
0S!
b1111111111111111111111111100 S"
b10000000000000001101111 S#
b10000000000000001101111 T#
b1101111 U#
b100 V!
b0 V"
b1101111 V#
b1101111 W!
b1111 W"
b1101111 W#
b10000000000000000000000000000 X
b1101111 X#
b1101111 Y#
b0 Z!
b1 [!
b0 ["
0\!
0]!
0^!
b1111111111111111111111111100 _
0_!
b10000000000000000000000000000 `
0`!
0a!
b0 a"
1b!
b11 c
0c!
0d!
0e!
b100 h!
b0 i!
1k
1r!
b10000000000000000000000000000 s
b0 t#
b1111111111111111111111111100 u!
b1 v"
b10 w"
1x
b10000000000000000000000000000 x!
b0 z#
b0 {!
b0 |"
b0 }"
b0 ~!
#620000
0!
0F$
#630000
1!
b0 "#
b0 #"
b0 %#
b1 &
b100 &"
b0 &#
b1 '
b11111111000000010000000100010011 (
b1 (!
b0 )"
b0 )#
b10000000000000000000000000100 *
b10000000000000000000000000100 +
b10 ,
b100 ,"
b0 ,#
b10000000000000000000000000000 -
b10000000000000000000000000100 .
b10000000000000000000000001000 /
0/"
b0 /#
b10000000000000000000000000100 1
b100000000000000000000000001 2
b0 2"
b10000000000000000000000000000 2#
b1 3
b1 4
b1010001111000000101000001110011 5
05"
15#
b0 7$
b1 8"
b1 ;"
b10 ;#
b0 ;$
b100000000000000000000000001 <
b10000000000000000000000000100 <!
b1010001111000000101000001110011 =
b0 >
b10 >"
b11110 A
b0 A"
b0 A#
0B$
b11111111000000010000000100010011 D!
0D"
b0 E
b100 E#
1F$
b11 G"
b1 I$
b11110 J
0J"
1K
b101 L
b1010001111000000101000001110011 L!
b0 M
0M"
b0 O
b0 P"
b0 Q#
b0 R
1S
0S!
b10000000000000000000000000000 S"
b11110 V!
b10000000000000000000000000100 V"
b1110011 W!
b0 W"
b10000000000000000000000000100 X
b11 X"
b100 Y
b11 Y"
b101 Z!
b0 [!
b10000000000000000000000000000 ["
0\!
b100 \"
b100 ]
0]!
0^!
b0 ^"
b10000000000000000000000000000 _
0_!
b0 _"
b10000000000000000000000000100 `
0`!
0`"
b1 a
0a!
b0 a"
b10 b
0b!
b1 c
0c!
0d!
1e!
b11 f
b0 h!
b10000000000000000000000000100 h"
b0 i!
b1111111111111111111111111100 i"
b10000000000000000000000000100 j"
b0 k"
b0 l"
b0 m"
1n
b0 n"
1o
b10000000000000000000000000100 o"
b10000000000000000000000000100 p
b1000000000000000000000000 p"
b1000000000000000000000000 q"
b11 r
1r!
b10000000000000000000000000100 s
b0 t#
b10000000000000000000000000000 u!
b10 v"
b11 w"
b10000000000000000000000000100 x!
1y
1y"
b0 z
b0 z#
b0 {!
b0 |"
b10000000000000000000000000000 }
b0 }"
b0 ~!
#640000
0!
0F$
#650000
1!
b0 "#
b0 #"
b0 %#
b10 &
b0 &"
b0 &#
b0 '
b0 (!
b11111111000000010000000100010011 )
b0 )"
b10000000000000000000000000100 )#
b10000000000000000000000001000 *
b1010001111000000101000001110011 *!
b0 +
b0 ,
b0 ,"
b0 ,#
b0 -
0/"
b11 /#
b0 2
b0 2"
b10000000000000000000000000100 2#
b10 3
b0 4
05"
15#
b0x0x000xxxx000000x0x00000xxx00xx 6
b0 7$
b0 8"
b0 ;"
b11 ;#
b0 ;$
b100000000000000000000000010 <
b10000000000000000000000000100 <!
b0 >"
b1 >#
b0 A"
b0 A#
0B$
0D"
b11111111000000010000000100010011 E!
b100 E#
b1010001111000000101000001110011 F#
1F$
b0 G"
b10 I$
0J"
b1010001111000000101000001110011 M!
0M"
b0 O#
b0 P"
b10000000000000000000000000100 P#
b10000000000000000000000000100 Q#
b1 R#
b0 S"
b1010001111000000101000001110011 S#
b1010001111000000101000001110011 T#
b1110011 U#
b0 V"
b101000001110011 V#
b0 W"
b101000001110011 W#
b0 X"
b1110011 X#
b0 Y
b0 Y"
b1110011 Y#
b0 ["
b0 \"
b0 ]
b0 _
b0 _"
b0 `
0`"
b0 a
b0 a"
b0 b
b0 c
b0 f
b0 h"
b0 i"
b0 j"
0k
b0 k"
b0 l"
b0 m
b0 m"
0n
b0 n"
b0 o"
b0 p
b0 p"
b0 q"
b0 r
0r!
b0 s
b0 t#
b0 u!
b11 v"
b100 w"
0x
b0 x!
0y
0y"
b0 z
b1 z"
b0 z#
b10000000000000000000000000100 {
b0 {!
b10 {"
b11 |
b0 |"
b10000000000000000000000000100 }
b0 }"
b0 ~!
#660000
0!
0F$
#670000
1!
b0 "#
b0 #"
b0 %#
b11 &
b11110 &"
b110000010000000000000011101111 (
b10000000000010000000100110111 )
b0 )"
b0 )#
b10000000000000000000000001100 *
b10000000000000001101111 *!
b0 ,"
b0 ,#
b10000000000000000000000000100 -
b10000000000000000000000001000 .
b10000000000000000000000001100 /
0/"
b0 /#
b10000000000000000000000001000 1
b101 2"
b0 2#
b11 3
b110010011 5
15"
05#
b0x000000000000000xx0xxxx 6
b0 7$
b0 8"
b0 ;
b1 ;"
b100 ;#
b0 ;$
b100000000000000000000000011 <
b10000000000000000000000001000 <!
b110010011 =
b0 >"
b0 A
b0 A"
b0 A#
0B$
b110000010000000000000011101111 D!
0D"
b0 E
b10000000000010000000100110111 E!
b100 E#
b10000000000000001101111 F#
1F$
b0 G"
b11 I$
b0 J
1J"
0K
b0 L
b110010011 L!
b11 M
b10000000000000001101111 M!
0M"
b0 O#
b10 P
b0 P"
b0 P#
b0 Q#
b1 R
b0 R#
0S
0S!
b10000000000000000000000000100 S"
b10000000000000001101111 S#
b11 T
b11 T!
b10000000000000001101111 T#
b1101111 U#
b0 V!
b1101111 V#
b10011 W!
b0 W"
b1101111 W#
b10000000000000000000000001000 X
b1 X"
b1101111 X#
b1 Y"
b1101111 Y#
b0 Z!
b11 [!
b0 ["
0\!
b0 \"
b11110 ]
0]!
0^!
b0 ^"
b10000000000000000000000000100 _
1_!
b0 _"
b10000000000000000000000001000 `
0`!
0`"
0a!
0b!
b1 c
0c!
0d!
0e!
b1101 e"
b1101 f"
1g
b101 h
b0 h!
1i
b0 i!
1k
b0 m
0o
1r!
b10000000000000000000000001000 s
0t"
b0 t#
b10000000000000000000000000100 u!
1v
b100 v"
b101 w"
1x
b10000000000000000000000001000 x!
b0 z#
b0 {
b0 {!
b0 |
b0 |"
b0 }
b0 }"
b0 ~!
#680000
0!
0F$
#690000
1!
b0 "#
b0 #"
b0 %#
b100 &
b0 &"
b11111101000000010000000100010011 (
b11 )"
b0 )#
b10000000000000000000000010000 *
b0 ,"
b0 ,#
b10000000000000000000000001000 -
b10000000000000000000000001100 .
b10000000000000000000000010000 /
0/"
b0 /#
b10000000000000000000000001100 1
b0 2"
b10000000000000000000000001000 2#
b100 3
b100000000000110010011 5
05"
15#
b0 7$
b11 8"
b0 ;
b10 ;"
b101 ;#
b0 ;$
b100000000000000000000000100 <
b10000000000000000000000001100 <!
b100000000000110010011 =
b1 >
b0 >"
b1 A
b0 A"
b0 A#
0B$
b11111101000000010000000100010011 D!
0D"
b0 E
b100 E#
1F$
b1 G"
b100 I$
b1 J
0J"
b100000000000110010011 L!
b0 L#
0M"
b0 P"
b0 Q#
0S!
b10000000000000000000000001000 S"
b1 V!
b0 W"
b10000000000000000000000001100 X
b0 X"
b11 Y"
b0 Z!
b0 ["
b0 \"
b0 ]
b11 ^
b0 ^"
b10000000000000000000000001000 _
b0 _"
b10000000000000000000000001100 `
0`"
b11 a
b10 c
b0 e"
b1 f
b0 f"
0g
b0 h
b1 h!
0i
b0 i!
1o
b11 q
b1 r
1r!
b10000000000000000000000001100 s
0t"
b0 t#
b10000000000000000000000001000 u!
0v
b101 v"
b110 w"
b10000000000000000000000001100 x!
b0 z#
b0 {!
b0 |"
b10000000000000000000000001000 }
b0 }"
b0 ~!
#700000
0!
0F$
#710000
1!
b0 "#
b0 #"
b0 %#
b101 &
b1 &"
b1 &#
b10100000010010011000100011 (
b11 )"
b0 )#
b10000000000000000000000010100 *
b1 +
b1 ,"
b11 ,#
b10000000000000000000000001100 -
b10000000000000000000000010000 .
b10000000000000000000000010100 /
0/"
b1 /#
b10000000000000000000000010000 1
b0 2
b0 2"
b10000000000000000000000001100 2#
b101 3
b1010001111000011001000001110011 5
05"
15#
b0 7$
b11 8"
b0 ;
b10 ;"
b110 ;#
b0 ;$
b100000000000000000000000101 <
b10000000000000000000000010000 <!
b1010001111000011001000001110011 =
b11 >
b0 >"
1?
b11 @
b11110 A
b0 A"
b0 A#
b11 B
0B$
b0 D
b10100000010010011000100011 D!
0D"
b0 E
b100 E#
b11 F
1F$
b1 G"
b11 H
b101 I$
b11110 J
0J"
1K
b1 L
b1010001111000011001000001110011 L!
b0 M
0M"
b1 P
b0 P"
b0 Q#
b0 R
1S
0S!
b10000000000000000000000001100 S"
b0 T
b0 T!
b11 U!
b11110 V!
b1 V"
b1110011 W!
b10000000000000000000000010000 X
b1 X"
b1 Y
b11 Y"
b1 Z!
b0 [!
b0 ["
0\!
b1 \"
b1 ]
0]!
0^!
b0 ^"
b10000000000000000000000001100 _
0_!
b0 _"
b10000000000000000000000010000 `
0`!
0`"
0a!
b1 a"
0b!
b10 b"
0c!
b110 c"
0d!
1e!
b11 h!
b1 h"
b0 i!
b11111111111111111111111111111111 i"
b1 j"
b0 k"
b0 l"
b0 m
b1 m"
b1 n"
b1 o"
b1 p
b0 p"
b0 q"
1r!
b10000000000000000000000010000 s
b0 t#
b10000000000000000000000001100 u!
b110 v"
b111 w"
b10000000000000000000000010000 x!
b0 z
b0 z#
b0 {!
b1 |
b0 |"
b10000000000000000000000001100 }
b0 }"
b0 ~!
#720000
0!
0F$
#730000
1!
b1 !!
b0 "#
b11 #"
b1 %#
b110 &
b11110 &"
b1 &#
b11000000010000010000010011 (
b0 )"
b1 )#
b10000000000000000000000011000 *
b1 +
b11 ,"
b11 ,#
b10000000000000000000000010000 -
b10000000000000000000000010100 .
b10000000000000000000000011000 /
0/"
b1 /#
b10000000000000000000000010100 1
b0 2
b1 2"
b10000000000000000000000010000 2#
b110 3
b1101111 5
15"
15#
b0 7$
b0 8"
b0 ;
b1 ;"
b111 ;#
b0 ;$
b100000000000000000000000110 <
b10000000000000000000000010100 <!
b1101111 =
b0 >
b0 >"
b0 @
b0 A
b0 A"
b0 A#
0B$
b1 C
b0 D
b11000000010000010000010011 D!
0D"
b0 E
b100 E#
1F$
b0 G"
b0 H
b110 I$
b0 J
1J"
0K
b0 L
b1101111 L!
b1 M
0M"
b10 O
b0 O#
b0 P"
b1 P#
b1 Q#
b11 R
b0 R#
0S
0S!
b10000000000000000000000010000 S"
b100000000000000 T#
b0 U!
b0 U#
b0 V!
b1 V"
b100000000000000 V#
b1101111 W!
b0 W"
b100000000000000 W#
b10000000000000000000000010100 X
b0 X"
b0 X#
b11 Y
b1 Y"
b0 Y#
b0 Z!
b1 [!
b1 ["
b11 \
0\!
b0 \"
b11110 ]
0]!
b0 ]"
b0 ^
0^!
b1 ^"
b10000000000000000000000010000 _
0_!
b0 _"
b10000000000000000000000010100 `
0`!
0`"
b0 a
0a!
b1 a"
1b!
b10 b"
b1 c
0c!
b110 c"
0d!
0e!
b1 e"
b0 f
b1 f"
1g
b1 h
b0 h!
b1 h"
1i
b0 i!
b1 i"
b1 j"
b0 k"
b1 l"
b1 m
b0 m"
b0 n"
b1 o"
b1 p
b1 p"
b0 q
b1 q"
b0 r
1r!
b10000000000000000000000010100 s
0t"
b0 t#
b10000000000000000000000010000 u!
1v
b111 v"
b1 w
b1000 w"
b10000000000000000000000010100 x!
b0 z
b0 z#
b1 {
b0 {!
b0 |"
b10000000000000000000000010000 }
b0 }"
b0 ~!
#740000
0!
0F$
#750000
1!
b0 "#
b0 #"
b1 %
b1 %#
b101 &
b0 &"
b0 &#
b101 '
b11111100101001000010111000100011 (
b101 (!
b0 )"
b1 )#
b10000000000000000000000010100 *
b10000000000000000000000010100 +
b10 ,
b0 ,"
b0 ,#
b10000000000000000000000010100 -
b10000000000000000000000011000 .
b10000000000000000000000011100 /
0/"
b0 /#
b10000000000000000000000011000 1
b100000000000000000000000101 2
b0 2"
b10000000000000000000000010100 2#
b101 3
b101 4
b11000000000000000001000001110011 5
05"
15#
b0 7$
b1 8"
b0 ;
b1 ;"
b1000 ;#
b0 ;$
b100000000000000000000000101 <
b10000000000000000000000011000 <!
b11000000000000000001000001110011 =
b10 >"
0?
b0 A"
b0 A#
b0 B
0B$
b0 C
b0 D
b11111100101001000010111000100011 D!
0D"
b0 E
b100 E#
b0 F
1F$
b11 G"
b111 I$
0J"
1K
b1 L
b11000000000000000001000001110011 L!
b1 L#
b0 M
0M"
b0 O
b0 P"
b0 P#
b0 Q#
b0 R
1S
0S!
b10000000000000000000000010100 S"
b10000000000000000000000010100 V"
b1110011 W!
b0 W"
b10000000000000000000000011000 X
b11 X"
b0 Y
b11 Y"
b1 Z!
b0 [!
b10000000000000000000000010100 ["
b0 \
0\!
b0 \"
b0 ]
0]!
b0 ]"
0^!
b0 ^"
b10000000000000000000000010100 _
0_!
b0 _"
b10000000000000000000000011000 `
0`!
0`"
b1 a
0a!
b0 a"
b10 b
0b!
b1 b"
0c!
b11 c"
0d!
1e!
b0 e"
b11 f
b0 f"
0g
b0 h
b0 h!
b10000000000000000000000010100 h"
0i
b0 i!
b10000000000000000000000010100 i"
b10000000000000000000000010100 j"
b0 k"
b10000000000000000000000010100 l"
b0 m
b0 m"
1n
b0 n"
b10000000000000000000000010100 o"
b10000000000000000000000010100 p
b0 p!
b10000000000000000000000010100 p"
b0 q!
b10000000000000000000000010100 q"
b11 r
1r!
b10000000000000000000000011000 s
0t"
b0 t#
b10000000000000000000000010100 u!
0v
b1000 v"
b0 w
b1001 w"
b10000000000000000000000011000 x!
1y
1y"
b0 z
b0 z#
b0 {!
b0 |
b0 |"
b10000000000000000000000010100 }
b0 }"
b0 ~!
#760000
0!
0F$
#770000
1!
1F$
1H$
